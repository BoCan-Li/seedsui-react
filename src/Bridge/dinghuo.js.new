import DB from './../DB'
import Device from './../Device'
import locale from './../locale'

var Bridge = {
  /**
   * 定制功能
   */
  platform: 'dinghuo',
  config: function () {
    var self = this
    // 返回物理按键绑定
    self.addBackPress()
    self.registerHandler(['getGoodsByApp', 'getCartGoodsByApp', 'onBackPress', 'setOnlineByApp', 'reloadByApp'])
    self.invoke('config', {auth: false})
  },
  /**
	   * 统一处理桥接返回结果
	   * @param {string} api 桥接名称
	   * @param {object} response 返回结果
	   * @param {function|object} callback 回调函数
	   */
  handler: function (api, response, callback) {
    if (!callback) return
    if (typeof callback === 'function') {
      callback(response)
      return
    }
    if (typeof callback !== 'object') return
    var msg = response && response.errMsg ? response.errMsg : ''
    if (msg) {
      var index = msg.indexOf(':')
      var res = msg.substring(index + 1)
      switch (res) {
        case 'ok':
          if (callback.success) callback.success(response)
          break
        case 'cancel':
          if (callback.cancel) callback.cancel(response)
          break
        default:
          if (callback.fail) callback.fail(response)
      }
    }
    callback.complete && callback.complete(response)
  },
  // 公共方法，通过桥接调用原生方法公共入口
  invoke: function (api, params, callback) {
    var self = this
    if (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)) { /* 判断iPhone|iPad|iPod|iOS */
      /* eslint-disable */
      self.setup(function(bridge) {
        bridge.callHandler(api, params, function(response) {
          try {
            self.handler(api, JSON.parse(response), callback)
          } catch (e) {
            self.handler(api, response, callback)
          }
        })
      })
      /* eslint-enable */
    } else if (/(Android)/i.test(navigator.userAgent)) { /* 判断Android */
      // 注册分类页面事件
      if (window.WebViewJavascriptBridge) {
        window.WebViewJavascriptBridge.callHandler(api, params && JSON.stringify(params), function (response) {
          try {
            self.handler(api, JSON.parse(response), callback)
          } catch (e) {
            self.handler(api, response, callback)
          }
        })
      } else {
        document.addEventListener('WebViewJavascriptBridgeReady', () => {
          window.WebViewJavascriptBridge.callHandler(api, params && JSON.stringify(params), function (response) {
            if (callback) {
              try {
                self.handler(api, JSON.parse(response), callback)
              } catch (e) {
                self.handler(api, response, callback)
              }
            }
          })
        }, false)
      }
    }
  },
  setup: function (callback) {
    /* eslint-disable */
    if (window.WebViewJavascriptBridge) {
      return callback(WebViewJavascriptBridge)
    }
    if (window.WVJBCallbacks) {
      return window.WVJBCallbacks.push(callback)
    }
    window.WVJBCallbacks = [callback]
    var WVJBIframe = document.createElement('iframe')
    WVJBIframe.style.display = 'none'
    WVJBIframe.src = 'https://__bridge_loaded__'
    document.documentElement.appendChild(WVJBIframe)
    setTimeout(function () {
      document.documentElement.removeChild(WVJBIframe)
    }, 0)
    /* eslint-enable */
  },

  // 注册事件
  registerHandler: function (events) {
    var self = this
    if (typeof window !== 'undefined') {
      if (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)) { /* 判断iPhone|iPad|iPod|iOS */
        /* eslint-disable */
        self.setup(function(bridge) {
          events.forEach((eventName) => {
            bridge.registerHandler(eventName, () => {
                const event = new CustomEvent(eventName)
                // 分发事件
                window.dispatchEvent(event)
            })
          })
        })
        /* eslint-enable */
      } else if (/(Android)/i.test(navigator.userAgent)) { /* 判断Android */
        // 注册分类页面事件
        if (window.WebViewJavascriptBridge) {
          events.forEach((eventName) => {
            window.WebViewJavascriptBridge.registerHandler(eventName, () => {
              const event = new CustomEvent(eventName)
              // 分发事件
              window.dispatchEvent(event)
            })
          })
        } else {
          document.addEventListener(
            'WebViewJavascriptBridgeReady', () => {
              events.forEach((eventName) => {
                window.WebViewJavascriptBridge.registerHandler(eventName, () => {
                  const event = new CustomEvent(eventName)
                  // 分发事件
                  window.dispatchEvent(event)
                })
              })
            }, false)
        }
      }
    }
  },
  // 判断是否是主页
  isHomePage: function (callback) {
    var self = this
    self.invoke('isHomePage', null, function (data) {
      if (data.result.toString() === '1') {
        callback(true)
      } else {
        callback(false)
      }
    })
  },
  // 获得版本信息
  getAppVersion: function () {
    const ua = navigator.userAgent.toLowerCase()
    var verExp = ua.match(/dinghuoappversion\/.{0,}(\d+\.\d+\.\d+)/)
    if (verExp && verExp[1]) return verExp[1].trim()
    return ''
  },
  // 去首页
  goHome: function (callback) {
    var self = this
    self.invoke('goHome', null, callback)
  },
  // 退出到登陆页面
  logOut: function () {
    var self = this
    self.invoke('logOut')
  },
  // 打开新的窗口
  openWindow: function (params) {
    var self = this
    params = params || {}
    if (params.url) {
      if (params.url.indexOf('h5:') === 0) params.url = params.url.replace(/^h5:/, '')
      else if (params.url.indexOf('webview:') === 0) params.url = params.url.replace(/^webview:/, '')
    }
    self.invoke('openWindow', {
      title: params.title || '',
      url: params.url
    }, params);
  },
  // 关闭当前窗
  closeWindow: function (params) {
    var self = this
    params = params || {}
    self.invoke('closeWindow', {}, params)
  },
  /**
    * 修改原生标题
    * @param {Object} params {title: '自定义标题', visiable: '0' 隐藏  '1' 展示, left: { show: false 隐藏返回按钮 true 显示返回按钮}}
    */
  setTitle: function (params) {
    var self = this
    params = params || {}
    if (params && params.title) document.title = params.title
    self.invoke('setTitle', params)
  },
  // 客户端添加返回绑定
  addBackPress: function (callback) {
    var self = this
    try {
      self.setBackEnable(true)
      window.addEventListener('onBackPress', callback || self.back)
      // ios客户端返回按钮绑定(ios不支持onBackPress)
      self.addIosBackPress(callback)
    } catch (error) {
      console.log(error)
    }
  },
  // 客户端移除返回绑定
  removeBackPress: function (callback) {
    var self = this
    try {
      self.setBackEnable(false)
      window.removeEventListener('onBackPress', callback || self.back)
    } catch (error) {
      console.log(error)
    }
  },
  /**
    * 支付宝支付
    * @param {Object} params {orderInfo: ''}
    * @param {Function} callback
    * @callback(result) {Object} {code: "0", message: "支付成功"}|{code: "-1", message: "支付失败"}|{code: "-1", message: "数据解析异常"}
    */
  alipay: function (params, callback) {
    var self = this
    self.invoke('alipay', params, callback)
  },
  /**
    * 商联支付
    * @param {Object} params {appKey:'', dealerCode:'', orderId:'', payAmount:''}
    * @param {Function} callback 回调
    */
  slopenpay: function (params, callback) {
    var self = this
    self.invoke('slopenpay', params, callback)
  },
  /**
    * 大华捷通支付
    * @param {Object} params {payChannel:'UPPay 云闪付  WXPay微信支付 AliPay 支付宝支付', payData:'服务端获取'}
    * @param {Function} callback 回调
    */
  qmfpay: function (params, callback) {
    var self = this
    // resultCode:
    // 0000 支付请求发送成功,商户订单是否成功支付应该以商户后台收到支付结果
    // 1000 用户取消支付
    // 1001 参数错误
    // 1002 网络连接错误
    // 1003 支付客户端未安装
    // 2001 订单处理中，支付结果未知(有可能已经支付成功)，请通过后台接口查询订单状态
    // 2002 订单号重复
    // 2003 订单支付失败
    // 9999 其他支付错误
    // 5004 版本过低
    if (Device.compareVersion(Device.platformVersion, '2.3.6') < 0) {
      callback({resultCode:'5004',resultInfo:'{"resultMsg":"请安装2.3.6以上版本"}'})
      return
    }
    self.invoke('qmfpay', params, callback)
  },
  // ios客户端返回按钮绑定, ios不支持addBackPress
  addIosBackPress: function (callback) {
    var self = this
    self.invoke('onHistoryBack', null, () => {
      if (callback) callback()
      else if (self.back) self.back()
      self.addIosBackPress(callback)
    })
  },
  /**
    * 分享文本
    * @param {Object} params
    * {
    * title: '标题(仅ios支持)',
    * desc: '副标题(仅ios支持)',
    * link: '链接(仅ios支持)',
    * text: '文本(安卓只支持发送文本)',
    * }
    * @param {Function} callback 回调
    */
  shareText: function (params, callback) {
    var self = this
    self.invoke('shareText', params, callback)
  },
  /**
    * 获取订货包名
    * @param {Function} callback({result: 'cn.com.wq.ordergoods'}), ios包名cn.com.wq.ordergoods, android包名com.waiqin365.dhcloud
    */
  getIdentification: function (callback) {
    var self = this
    if (Device.compareVersion(Device.platformVersion, '2.3.6') < 0) {
      callback({})
      return
    }
    self.invoke('getIdentification', null, callback)
  },
  /* -----------------------------------------------------
    文件操作
  ----------------------------------------------------- */
  /* 文件是否存在
  isExistsFile({
    "fileName": "ss.txt",
    "size": 200
  }, (result) => {
  // 返回格式 {{"isExists":"","filePath":"","fileName":""}，isExists:'0'不存在，'1'存在
  })
  */
  isExistsFile: function (params, callback) {
    var self = this
    self.invoke('isExistsFile', params, callback)
  },
  /* 附件下载
  downloadFile({
    "id": "id",
    "fileName": "ss.txt",
    "downloadUrl": "http://...",
    "size": 200
  }, (result) => {
  // 返回格式 {{"code":"","filePath":"","message":""}，code:'0'失败，'1'成功，message失败原因
  }) */
  downloadFile: function (params, callback) {
    var self = this
    self.invoke('downloadFile', params, callback)
  },
  /* 附件打开
  openFile（{
    "filePath": ""
  }, (result) => {
  // 返回格式 {{"code":"","message":""}，code:'0'失败，'1'成功，message失败原因
  }） */
  openFile: function (params, callback) {
    var self = this
    self.invoke('openFile', params, callback)
  },
  /**
	   * 预览文件接口(新客户端中支持)
	   * @param {object} params
	   * @prop {string} url 需要预览文件的地址
	   * @prop {string} name 需要预览文件的文件名（不填的话截取url的最后部分）
	   * @prop {number} size 需要预览文件的字节大小
	   * @example
	   * Bridge.previewFile({
	   *    url: 'http://www.waiqin365.com/p/v3/assets/bannerbg7.png',
	   *    name: '外勤365.png',
	   *    size: 15312
	   * })
	   */
  previewFile: function (params) {
    var self = this
    params = params || {}
    self.invoke('previewFile', params, params)
  },
  /**
	   * 扫描二维码并返回结果
	   * @param {object} params 
	   */
  scanQRCode: function (params) {
    var self = this
    params = params || {}
    self.invoke('scanQRCode', {
      desc: params.desc || '',
      needResult: params.needResult || 0,
      scanType: params.scanType || ['qrCode', 'barCode']
    }, params)
  },
  /**
    * 获取当前地理位置
    * @param {Object} params
    * @prop {String} type 'wgs84'|'gcj02'坐标类型微信默认使用国际坐标'wgs84',
    * @prop {Number} cache 默认60秒缓存防重复定位
    * @return {Object} {latitude: '纬度', longitude: '经度', speed:'速度', accuracy:'位置精度'}
    */
  getLocation: function (params = {}) {
    var self = this
    // 先从cookie中读取位置信息
    var appLocation = DB.getCookie('app_location')
    if (appLocation === 'undefined') {
      DB.removeCookie('app_location')
      appLocation = ''
    }
    try {
      if (appLocation) appLocation = JSON.parse(appLocation)
    } catch (error) {
      appLocation = ''
    }
    if (appLocation) {
      if (params.success) params.success(appLocation)
      return
    }
    // 调用定位
    if (self.locationTask) {
      self.locationTask.push(params)
      return
    }
    self.locationTask = []
    console.log('调用定位...')
    self.invoke('getLocation', params.type || 'gcj02', (res) => {
      // 将位置信息存储到cookie中60秒
      if (res.longitude && res.latitude) {
        if (params.cache) DB.setCookie('app_location', JSON.stringify(res) , params.cache || 60)
        if (params.success) params.success(res)
      } else {
        if (params.fail) params.fail(res)
      }
      if (params.complete) params.complete(res)
      self.getLocationTask(res)
    })
  },
  /**
    * 获取当前网络状态
    * @param {Function} callback({networkType:'返回网络类型2g，3g，4g，wifi'})
    */
  getNetworkType: function (callback) {
    var self = this
    self.invoke('getNetworkType', null, callback)
  },
  /**
    * 拍照、本地选图
    * @param {Object} params
    * {
      count: 1, // 默认9
      sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有
      sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有
      // 老客户端水印
      watermark: {
        orderNo: '编号',
        submitName: '提交人',
        customerName: '客户',
        cmLocation: '31.982473, 118.730515',
        isWaterMark: '1', // 是否启用水印
      },
      // 新客户端水印
      watermark: ['第一行文字', '第二行文字']
      success({localIds:['LocalResource://imageid'+id]})
    * }
    */
  chooseImage: function (params) {
    var self = this
    params = params || {}
    self.invoke('chooseImage', {
      scene: '1|2',
      count: params.count || 9,
      sizeType: params.sizeType || ['original', 'compressed'],
      sourceType: params.sourceType || ['album', 'camera'],
      watermark: params.watermark || [],
      isSaveToAlbum: params.isSaveToAlbum || 1,
      isAI: params.isAI || 0
    }, params)
  },
  /**
    * 照片上传, ios测试环境无法上传
    * @param {Object} params
    * {
      uploadDir: '目录/年月',
      tenantId: 'ios必传'
      localId: 'localId',
      success: func(res)
    * }
    */
  uploadImage: function (params) {
    var self = this
    params = params || {}
    if (!params.uploadDir) {
      if (params.fail) params.fail({errMsg: 'uploadImage:fail' + locale('没有上传目录', 'hint_no_upload_dir')})
      return
    }
    if (!params.localId) {
      if (params.fail) params.fail({errMsg: 'uploadImage:fail' + locale('没有上传地址', 'hint_no_upload_localeid')})
      return
    }
    if (!params.tenantId) {
      if (params.fail) params.fail({errMsg: 'uploadImage:fail' + locale('没有上传企业id', 'hint_upload_image_must_tenantId')})
      return
    }
    // 上传不能包含'LocalResource://imageid'
    if (params.localId.indexOf('LocalResource://imageid') !== -1) {
      params.localId = params.localId.replace(/LocalResource:\/\/imageid/igm, '')
    }
    // ios判断: navigator.userAgent.toLowerCase().match(/cpu iphone os (.*?) like mac os/)
    if (params.async) { // 老客户端使用异步上传
      console.log('订货客户端异步上传', params)
      if (params.localId) params.localIds = [params.localId]
      self.invoke('uploadImage', params) // 安卓没有回调, ios回调返回{result: true}
      if (params.success) {
        params.success({
          errMsg: 'uploadImage:ok',
          path: `${params.uploadDir}/${params.localId}`, // 前后不带/, 并且不带企业参数的上传路径
          serverId: params.localId,
          tenantId: params.tenantId
        })
      }
    } else { // 同步上传
      console.log('订货客户端同步上传', params)
      // ext参数: isAutoCheck: '0'/'1'是否自动识别|cmId: 客户Id|appId：应用Id|menuId: 菜单Id(必填)|funcId: 表单Id
      let menuId = Device.getUrlParameter('menuId') || ''
      let ext = params.ext || {}
      if (menuId) {
        ext = {
          menuId: menuId,
          ...(params.ext || {})
        }
      }
      self.invoke('uploadImage', {
	      tenantId: params.tenantId || '',
	      uploadDir: params.uploadDir || '',
	      fileName: params.fileName || '',
	      localId: params.localId,
	      isShowProgressTips: 0 == params.isShowProgressTips ? 0 : 1,
	      ext: ext
	    }, params);
    }
  },
  /**
    * 图片预览
    * @param {Object} params
    * {
    * urls:['本地照片需要加上LocalResource://imageid'],
    * current:'当前显示图片地址',
    * index:'当前显示图片索引'
    * }
    */
  previewImage: function (params) {
    var self = this
    params = params || {}
    if (!params.urls || !params.urls.length) {
      if (params.fail) params.fail({errMsg: 'previewImage:fail' + locale('没有预览图片地址', 'hint_preview_image_must_urls')})
      return
    }
    self.invoke('previewImage', params, params)
  },
  /* -----------------------------------------------------
    监听/取消监听物理返回事件(仅android)
    @params true:监听 | false:取消监听
  ----------------------------------------------------- */
  setBackEnable: function (flag) {
    var self = this
    if (/(Android)/i.test(navigator.userAgent)) { /* 判断Android */
      self.invoke('setBackEnable', flag)
    }
  },
  // 获取图片前缀
  getImagePrefix: function () {
    return 'LocalResource://imageid'
  },
  // 下载图片
  downloadImage: function () {

  },
  // 分享给朋友
  onMenuShareAppMessage: function () {

  },
  // 分享到朋友圈
  onMenuShareTimeline: function () {

  },
  // 获取登陆信息
  loginInfo: function (callback) {
    var self = this
    self.invoke('getLoginInfo', null, callback)
  },
  // 根据key获取登陆信息
  getLoginInfo (key, callback) {
    var self = this
    self.loginInfo(function (result) {
      callback(result[key])
    })
  },
  // 获取系统参数
  systemParameter (callback) {
    var self = this
    self.invoke('getSystemParameter', null, callback)
  },
  // 修改原生角标
  changeBadgeNum: function (count) {
    var self = this
    self.invoke('setBadgeNum', {key: count})
  }
}

export default Bridge
